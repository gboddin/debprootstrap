#!/bin/bash
#build a userland/debian from root/whatever, enjoy, you need sudo

#go where I should be, just to make sure

UBUNTU_MIRROR=http://archive.ubuntu.com/ubuntu
DEBIAN_MIRROR=http://http.debian.net/debian
[ -x config.cfg ] && . config.cfg
MY_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd ${MY_DIR}
echo DebProotstrap $(cat version) 

[ -z "$1" ] && echo "First required argument is target architecture (amd64,i386,armhf)" && exit 1
[ -z "$2" ] && echo "Second required argument is debian/ubuntu version to download (stable,testing,wheezy,jessie,karmic,intrepid,lucid,trusty ...)" && exit 1

# Oh come on, that code below is stupid ... make your mind about arch nomenclature, people
if (uname -m|grep -q 64); then
	HOST_ARCH_PROOT=x86_64 
	HOST_ARCH_DEB=amd64
elif (uname -m|grep -qi arm); then
	HOST_ARCH_PROOT=arm
	HOST_ARCH_DEB=armhf
elif (uname -m|grep i686); then
	HOST_ARCH_PROOT=x86
	HOST_ARCH_DEB=i386
fi
[ "$1" = "amd64" ] && TARGET_ARCH_PROOT=x86_64
[ "$1" = "i386" ] && TARGET_ARCH_PROOT=x86
[ "$1" = "armhf" ] && TARGET_ARCH_PROOT=arm
[ -z ${TARGET_ARCH_PROOT} ] && echo "Cannot build for arch $1" && exit 1

STATIC_PROOT=http://static.proot.me/proot-${HOST_ARCH_PROOT}
[ -f proot-${HOST_ARCH_PROOT} ]||(echo Getting static proot ${STATIC_PROOT} ...&&wget "${STATIC_PROOT}" -qO proot-${HOST_ARCH_PROOT})
[ -x proot-${HOST_ARCH_PROOT} ]||chmod +x proot-${HOST_ARCH_PROOT}


echo "Detected host arch ${HOST_ARCH_DEB} (proot-${HOST_ARCH_PROOT})"
echo "Building for arch $1 (proot-${TARGET_ARCH_PROOT})"

#setup dir :
[ -d build ] && rm -Rf build
[ -d debootstrap ] && rm -Rf debootstrap
mkdir debootstrap
mkdir -p build/debootstrap

# If not ARM get ubuntu cdebootstrap (so we can build ubuntu bootstrap otherwise go debian)
[ "${HOST_ARCH_DEB}" = "armhf" ]|| \
    STATIC_CDEBOOTSTRAP_PACKAGE=http://nl.archive.ubuntu.com/ubuntu/pool/universe/c/cdebootstrap/$(wget -qO - "http://nl.archive.ubuntu.com/ubuntu/pool/universe/c/cdebootstrap/?C=M;O=D"|grep ${HOST_ARCH_DEB}|grep static|head -1|cut -d\" -f8)
[ -z ${STATIC_CDEBOOTSTRAP_PACKAGE} ] && \
    STATIC_CDEBOOTSTRAP_PACKAGE=http://http.debian.net/debian/pool/main/c/cdebootstrap/$(wget -qO - "http://mirror.as35701.net/debian/pool/main/c/cdebootstrap/?C=M;O=D" |grep ${HOST_ARCH_DEB}|grep static|head -1|cut -d\" -f8)

echo "Getting static debootstrap ${STATIC_CDEBOOTSTRAP_PACKAGE} ..."
wget "${STATIC_CDEBOOTSTRAP_PACKAGE}" -q -O debootstrap/debootstrap.deb
echo "Extracting static deboostrap from deb package ..."
# get the name of the package in the package (the only tar.gz package)
CDB_STATIC_TAR=$(ar p debootstrap/debootstrap.deb data.tar.xz|tar JxvC debootstrap|grep "tar.gz$")

# now, extracting the package from the package from the package, OK ? :) 
# (static version of debootstrap with support files for various debian/unbutu versions)
tar -xzf debootstrap/${CDB_STATIC_TAR} -C build/debootstrap
# now check if we have the requested suite available
if ! cat build/debootstrap/cdebootstrap-support/suites|grep Suite|cut -d\: -f2|sort|grep -q "$2" ; then
	echo Suite $2 not found, available suites are :
	cat build/debootstrap/cdebootstrap-support/suites|grep Suite|cut -d\: -f2|sort
	exit 1
fi



if cat build/debootstrap/cdebootstrap-support/suites|grep "Suite.*$2" -A3|grep Keyring|grep -qv ubuntu; then
	DISTRO=debian
else
	DISTRO=ubuntu
	[ "${TARGET_ARCH_PROOT}" = "arm" ] && echo "Ubuntu not available on ARM" && exit 1
	[ "${2}" = "lucid" ] && echo "Lucid is currently broken and phasing out, not plan for support sorry." && exit 1
fi

FINAL_NAME=install-${DISTRO}-$2-$1-$(date +%Y%m%d%H%M).bundle

if [ "${DISTRO}" = "debian" ]; then
	echo Adding debian keyring from keyring package ...
	DEBIAN_KEYRING_PACKAGE=http://http.debian.net/debian/pool/main/d/debian-archive-keyring/$(wget "http://mirror.as35701.net/debian/pool/main/d/debian-archive-keyring/?C=M;O=D" -qO -|grep _all\.deb|head -1|cut -d\" -f8)
	wget "$DEBIAN_KEYRING_PACKAGE" -qO debootstrap/debian-keyring.deb
	DEBIAN_KEYRING_PACKAGE_DATA=$(ar t debootstrap/debian-keyring.deb |grep data.tar)
	KEYRING_FILE=$(ar p debootstrap/debian-keyring.deb ${DEBIAN_KEYRING_PACKAGE_DATA}|tar zxvC debootstrap|grep "debian-archive-keyring.gpg$")
	cp debootstrap/${KEYRING_FILE} build/debootstrap/cdebootstrap-support/debian-archive-keyring.gpg
	DISTRO_MIRROR=${DEBIAN_MIRROR}
else
    echo Getting ubuntu keyring ...
    #due to a dpkg/cdebootstrap bug, ubuntu is bootstrapped in 2 stages :
    # also they hate cdebootstrap it looks ... even apt source file installation fails ...
    wget "http://archive.ubuntu.com/ubuntu/project/ubuntu-archive-keyring.gpg" -qO build/debootstrap/cdebootstrap-support/ubuntu-archive-keyring.gpg
    #cheating , see https://bugs.launchpad.net/ubuntu/+source/dpkg/+bug/1376590
    mkdir -p build/usr/bin
    ln -sf mawk build/usr/bin/awk
    DISTRO_MIRROR=${UBUNTU_MIRROR}
fi

echo "Building a new ${FINAL_NAME} container installer ... "

# TODO cdebootstrap still requires root because proot can't handle the unshare call ... to investigate
# NOTE : that's why host arch proot is left here actually, target : get rid of that last sudo, even for the builder

sudo build/debootstrap/cdebootstrap --arch=$1 --flavour=minimal \
  -k build/debootstrap/cdebootstrap-support/${DISTRO}-archive-keyring.gpg \
  -c lib/config-${DISTRO} \
  $2 build ${DISTRO_MIRROR}

# till we can use proot to cdebootstrap we need to reset rootfs to the current uid/gid
echo "Resetting uid/gid to building user ..."
sudo chown --reference=${HOME} build -R

echo "Installing proot and start scripts into container ..."
wget "http://static.proot.me/proot-${TARGET_ARCH_PROOT}" -qO build/proot
chmod +x build/proot
cp lib/start-container build
echo Build is ready, bundling to ${FINAL_NAME} ...
cat lib/install-header.sh > ${FINAL_NAME}
tar cz build --exclude='dev' --exclude='proc' --exclude='sys'|base64 >> ${FINAL_NAME}
cat lib/install-footer.sh >> ${FINAL_NAME}
chmod +x ${FINAL_NAME}
echo "Bundle is ready, use \"./${FINAL_NAME} <DIR>\" to install your build in <DIR>"
