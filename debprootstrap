#!/bin/bash
#build a userland/debian from userland/whatever, enjoy

#go where I should be, just to make sure

UBUNTU_MIRROR=http://archive.ubuntu.com/ubuntu
DEBIAN_MIRROR=http://http.debian.net/debian

[ -x config.cfg ] && . config.cfg
MY_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd ${MY_DIR}

echo DebProotstrap $(cat version) 

[ -z "$1" ] && echo "First required argument is target architecture (amd64,i386,armhf)" && exit 1
[ -z "$2" ] && echo "Second required argument is debian/ubuntu version to download (stable,testing,wheezy,jessie,karmic,intrepid,lucid,trusty ...)" && exit 1

# Oh come on, that code below is stupid ... make your mind about arch nomenclature, people

. lib/shared-detect-host-arch.sh

TARGET_ARCH_DEB=$1

. lib/shared-detect-guest-arch.sh

[ -z ${TARGET_ARCH_PROOT} ] && echo "Cannot build for arch $1" && exit 1


for ARCH_PROOT in x86 x86_64 arm ; do
    STATIC_PROOT=http://static.proot.me/proot-${ARCH_PROOT}
    [ -f proot-${ARCH_PROOT} ]||(echo Getting static proot ${STATIC_PROOT} ...&&wget "${STATIC_PROOT}" -qO proot-${ARCH_PROOT})
    [ -x proot-${ARCH_PROOT} ]||chmod +x proot-${ARCH_PROOT}
done

STATIC_PROOT=http://static.proot.me/proot-${HOST_ARCH_PROOT}
DISTRO_SUITE=$2

echo "Detected host arch ${HOST_ARCH_DEB} (proot-${HOST_ARCH_PROOT})"
echo "Building for arch $1 (proot-${TARGET_ARCH_PROOT})"

#setup dir :
[ -d build ] && rm -Rf build
[ -d debootstrap ] && rm -Rf debootstrap
mkdir debootstrap
mkdir -p build/debootstrap

STATIC_CDEBOOTSTRAP_PACKAGE=http://nl.archive.ubuntu.com/ubuntu/pool/universe/c/cdebootstrap/$(wget -qO - "http://nl.archive.ubuntu.com/ubuntu/pool/universe/c/cdebootstrap/?C=M;O=D"|grep ${HOST_ARCH_DEB}|grep static|head -1|cut -d\" -f8)

echo "Getting static debootstrap ${STATIC_CDEBOOTSTRAP_PACKAGE} ..."
wget "${STATIC_CDEBOOTSTRAP_PACKAGE}" -q -O debootstrap/debootstrap.deb
echo "Extracting static deboostrap from deb package ..."
# get the name of the package in the package (the only tar.gz package)
CDB_STATIC_TAR=$(ar p debootstrap/debootstrap.deb data.tar.xz|tar JxvC debootstrap|grep "tar.gz$")

# now, extracting the package from the package from the package, OK ? :) 
# (static version of debootstrap with support files for various debian/unbutu versions)
tar -xzf debootstrap/${CDB_STATIC_TAR} -C build/debootstrap
# now check if we have the requested suite available

if ! cat build/debootstrap/cdebootstrap-support/suites|grep Suite|cut -d\: -f2|sort|grep -q "$2" ; then
	echo Suite $2 not found, available suites are :
	cat build/debootstrap/cdebootstrap-support/suites|grep Suite|cut -d\: -f2|sort
	exit 1
fi



if cat build/debootstrap/cdebootstrap-support/suites|grep "Suite.*$2" -A3|grep Keyring|grep -qv ubuntu; then
	DISTRO=debian
	echo Adding debian keyring from keyring package ...
	DEBIAN_KEYRING_PACKAGE=http://http.debian.net/debian/pool/main/d/debian-archive-keyring/$(wget "http://mirror.as35701.net/debian/pool/main/d/debian-archive-keyring/?C=M;O=D" -qO -|grep _all\.deb|head -1|cut -d\" -f8)
	wget "$DEBIAN_KEYRING_PACKAGE" -qO debootstrap/debian-keyring.deb
	DEBIAN_KEYRING_PACKAGE_DATA=$(ar t debootstrap/debian-keyring.deb |grep data.tar)
	KEYRING_FILE=$(ar p debootstrap/debian-keyring.deb ${DEBIAN_KEYRING_PACKAGE_DATA}|tar zxvC debootstrap|grep "debian-archive-keyring.gpg$")
	cp debootstrap/${KEYRING_FILE} build/debootstrap/cdebootstrap-support/debian-archive-keyring.gpg
	DISTRO_MIRROR=${DEBIAN_MIRROR}
else
	DISTRO=ubuntu
    echo Getting ubuntu keyring ...
    #due to a dpkg/cdebootstrap bug, ubuntu is bootstrapped in 2 stages :
    # also they hate cdebootstrap it looks ... even apt source file installation fails ...
    [ ! "${TARGET_ARCH_PROOT}" = "arm" ] && wget "http://archive.ubuntu.com/ubuntu/project/ubuntu-archive-keyring.gpg" -qO build/debootstrap/cdebootstrap-support/ubuntu-archive-keyring.gpg
    [ "${TARGET_ARCH_PROOT}" = "arm" ] && wget "http://ports.ubuntu.com/ubuntu-ports/project/ubuntu-archive-keyring.gpg" -qO build/debootstrap/cdebootstrap-support/ubuntu-archive-keyring.gpg
    #cheating , see https://bugs.launchpad.net/ubuntu/+source/dpkg/+bug/1376590
    mkdir -p build/usr/bin
    ln -sf mawk build/usr/bin/awk
    [ ! "${TARGET_ARCH_PROOT}" = "arm" ] && DISTRO_MIRROR=${UBUNTU_MIRROR}
    [ "${TARGET_ARCH_PROOT}" = "arm" ] && DISTRO_MIRROR=http://ports.ubuntu.com/ubuntu-ports/
	[ "${2}" = "lucid" ] && echo "Lucid is currently broken and phasing out, not plan for support sorry." && exit 1
fi


[ -z $3 ] && FINAL_NAME=install-${DISTRO}-$2-$1-$(date +%Y%m%d%H%M).bundle
[ ! -z $3 ] && FINAL_NAME=$3


echo "Building a new ${FINAL_NAME} container installer ... "

./proot-${HOST_ARCH_PROOT} -0 build/debootstrap/cdebootstrap --include=initscripts,dialog,sysvinit-core,wget,binutils --exclude=systemd --foreign --arch=$1 --flavour=minimal \
      -k build/debootstrap/cdebootstrap-support/${DISTRO}-archive-keyring.gpg \
      -c lib/config-${DISTRO} \
      $2 build ${DISTRO_MIRROR}

cp lib/second-stage build/sbin/second-stage
chmod +x build/sbin/second-stage
[ -f build/var/cache/bootstrap/cdebootstrap-helper-makedev.deb ] && rm  build/var/cache/bootstrap/cdebootstrap-helper-makedev.deb

if [ "${TARGET_ARCH_DEB}" = "${HOST_ARCH_DEB}" ] ; then
    PATH=/bin:/sbin:/usr/bin:/usr/sbin ./proot-${HOST_ARCH_PROOT} -w / -0 -b /dev -b /sys -b /proc -r build /sbin/second-stage
elif [ "${TARGET_ARCH_DEB}" = "i386" ] && [ "${HOST_ARCH_DEB}" = "amd64" ]; then
    #cheating most distro have elf 32bit support, faster, less buggy than qemu-system-i386
    PATH=/bin:/sbin:/usr/bin:/usr/sbin ./proot-${HOST_ARCH_PROOT} -w / -0 -b /dev -b /sys -b /proc -r build /sbin/second-stage
else
    PATH=/bin:/sbin:/usr/bin:/usr/sbin ./proot-${HOST_ARCH_PROOT} -w / -0 -q qemu-${TARGET_ARCH_QEMU} -b /dev -b /sys -b /proc -r build /sbin/second-stage
fi

echo "Installing proot and start scripts into container ..."
cp -R lib/guest-tools build/lib
cp proot-${TARGET_ARCH_PROOT} build/lib/guest-tools/proot
chmod +x build/lib/guest-tools/proot
cp lib/manage build/manage

# post hooks
[ -x post-build.sh ] && . ./post-build.sh

# test

if ! build/manage admin apt-get moo ; then
    echo "BUILD FAILED"
    exit 1
fi

echo "export ARCH=${TARGET_ARCH_DEB}" >> build/etc/environment
echo Build is ready, bundling to ${FINAL_NAME} ...
cat lib/install-header.sh > ${FINAL_NAME}
tar cz build --exclude='dev' --exclude='proc' --exclude='sys'|base64 >> ${FINAL_NAME}
cat lib/install-footer.sh >> ${FINAL_NAME}
chmod +x ${FINAL_NAME}
echo "Bundle is ready, use \"./${FINAL_NAME} <DIR>\" to install your build in <DIR>"
